For Phase 3, 'Hello' string is used as our random input.

Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
0 1 1 2 3 5
That's number 2.  Keep going!
Hello

Breakpoint 1, 0x0000000000400f15 in phase_3 ()

(gdb) disas
Dump of assembler code for function phase_3:
=> 0x0000000000400f15 <+0>:	sub    $0x18,%rsp
   0x0000000000400f19 <+4>:	mov    %fs:0x28,%rax
   0x0000000000400f22 <+13>:	mov    %rax,0x8(%rsp)
   0x0000000000400f27 <+18>:	xor    %eax,%eax
   0x0000000000400f29 <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000400f2e <+25>:	mov    %rsp,%rdx
   0x0000000000400f31 <+28>:	mov    $0x4025cf,%esi      //What is being moved from 0x4025cf
   0x0000000000400f36 <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>  //Function that takes input
   0x0000000000400f3b <+38>:	cmp    $0x1,%eax              //comparing 1 with result from input
   0x0000000000400f3e <+41>:	jg     0x400f45 <phase_3+48>
   0x0000000000400f40 <+43>:	callq  0x40143d <explode_bomb>
   0x0000000000400f45 <+48>:	cmpl   $0x7,(%rsp)
   0x0000000000400f49 <+52>:	ja     0x400fa6 <phase_3+145>  //jump to bomb if above 7
   0x0000000000400f4b <+54>:	mov    (%rsp),%eax
   0x0000000000400f4e <+57>:	jmpq   *0x402440(,%rax,8)
   0x0000000000400f55 <+64>:	mov    $0x134,%eax
   0x0000000000400f5a <+69>:	jmp    0x400f61 <phase_3+76>
   0x0000000000400f5c <+71>:	mov    $0x0,%eax
   0x0000000000400f61 <+76>:	sub    $0x85,%eax
   0x0000000000400f66 <+81>:	jmp    0x400f6d <phase_3+88>
   0x0000000000400f68 <+83>:	mov    $0x0,%eax
   0x0000000000400f6d <+88>:	add    $0x201,%eax
   0x0000000000400f72 <+93>:	jmp    0x400f79 <phase_3+100>
   0x0000000000400f74 <+95>:	mov    $0x0,%eax
   0x0000000000400f79 <+100>:	sub    $0x68,%eax
   0x0000000000400f7c <+103>:	jmp    0x400f83 <phase_3+110>
   0x0000000000400f7e <+105>:	mov    $0x0,%eax
   0x0000000000400f83 <+110>:	add    $0x68,%eax
   0x0000000000400f86 <+113>:	jmp    0x400f8d <phase_3+120>
   0x0000000000400f88 <+115>:	mov    $0x0,%eax
   0x0000000000400f8d <+120>:	sub    $0x68,%eax
   0x0000000000400f90 <+123>:	jmp    0x400f97 <phase_3+130>   
   0x0000000000400f92 <+125>:	mov    $0x0,%eax
   0x0000000000400f97 <+130>:	add    $0x68,%eax
   0x0000000000400f9a <+133>:	jmp    0x400fa1 <phase_3+140>
   0x0000000000400f9c <+135>:	mov    $0x0,%eax
---Type <return> to continue, or q <return> to quit---
   0x0000000000400fa1 <+140>:	sub    $0x68,%eax
   0x0000000000400fa4 <+143>:	jmp    0x400fb0 <phase_3+155>
   0x0000000000400fa6 <+145>:	callq  0x40143d <explode_bomb>
   0x0000000000400fab <+150>:	mov    $0x0,%eax
   0x0000000000400fb0 <+155>:	cmpl   $0x5,(%rsp)
   0x0000000000400fb4 <+159>:	jg     0x400fbc <phase_3+167>
   0x0000000000400fb6 <+161>:	cmp    0x4(%rsp),%eax          //compares $rsp+4 to $eax == %eax holds the answer!
   0x0000000000400fba <+165>:	je     0x400fc1 <phase_3+172>
   0x0000000000400fbc <+167>:	callq  0x40143d <explode_bomb>
   0x0000000000400fc1 <+172>:	mov    0x8(%rsp),%rax
   0x0000000000400fc6 <+177>:	xor    %fs:0x28,%rax
   0x0000000000400fcf <+186>:	je     0x400fd6 <phase_3+193>
   0x0000000000400fd1 <+188>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400fd6 <+193>:	add    $0x18,%rsp
   0x0000000000400fda <+197>:	retq   
End of assembler dump.

Check out <+28> to see what it is

(gdb) x /s0x4025cf
0x4025cf:	"%d %d"   //the user input must be two digits

Figure out what %eax is storing when pointed at 0x0000000000400f3b <+38>:	cmp    $0x1,%eax
(gdb) i r
rax            0x0	0
rbx            0x7fffffffde68	140737488346728
rcx            0x0	0
rdx            0x1	1
rsi            0x0	0
rdi            0x7fffffffd6f0	140737488344816
rbp            0x4021f0	0x4021f0 <__libc_csu_init>
rsp            0x7fffffffdd60	0x7fffffffdd60

Since %eax is less than 1, the bomb will be exploded. so which means the first input should be greater than 1 and less than 7.

That's number 2.  Keep going!
2 34       //lets take first interger greater than 1

Breakpoint 1, 0x0000000000400f15 in phase_3 ()
(gdb) disas
(gdb) u *0x0000000000400f3b
0x0000000000400f3b in phase_3 ()
(gdb) disas
Dump of assembler code for function phase_3:
   0x0000000000400f15 <+0>:	sub    $0x18,%rsp
   0x0000000000400f19 <+4>:	mov    %fs:0x28,%rax
   0x0000000000400f22 <+13>:	mov    %rax,0x8(%rsp)
   0x0000000000400f27 <+18>:	xor    %eax,%eax
   0x0000000000400f29 <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000400f2e <+25>:	mov    %rsp,%rdx
   0x0000000000400f31 <+28>:	mov    $0x4025cf,%esi
   0x0000000000400f36 <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
=> 0x0000000000400f3b <+38>:	cmp    $0x1,%eax
   0x0000000000400f3e <+41>:	jg     0x400f45 <phase_3+48>
   0x0000000000400f40 <+43>:	callq  0x40143d <explode_bomb>
   0x0000000000400f45 <+48>:	cmpl   $0x7,(%rsp)
   0x0000000000400f49 <+52>:	ja     0x400fa6 <phase_3+145>
   0x0000000000400f4b <+54>:	mov    (%rsp),%eax
   0x0000000000400f4e <+57>:	jmpq   *0x402440(,%rax,8)
   0x0000000000400f55 <+64>:	mov    $0x134,%eax
   0x0000000000400f5a <+69>:	jmp    0x400f61 <phase_3+76>
   0x0000000000400f5c <+71>:	mov    $0x0,%eax
   0x0000000000400f61 <+76>:	sub    $0x85,%eax
   0x0000000000400f66 <+81>:	jmp    0x400f6d <phase_3+88>
   0x0000000000400f68 <+83>:	mov    $0x0,%eax
   0x0000000000400f6d <+88>:	add    $0x201,%eax
   0x0000000000400f72 <+93>:	jmp    0x400f79 <phase_3+100>
   0x0000000000400f74 <+95>:	mov    $0x0,%eax
   0x0000000000400f79 <+100>:	sub    $0x68,%eax
   0x0000000000400f7c <+103>:	jmp    0x400f83 <phase_3+110>
   0x0000000000400f7e <+105>:	mov    $0x0,%eax
   0x0000000000400f83 <+110>:	add    $0x68,%eax
   0x0000000000400f86 <+113>:	jmp    0x400f8d <phase_3+120>
   0x0000000000400f88 <+115>:	mov    $0x0,%eax
   0x0000000000400f8d <+120>:	sub    $0x68,%eax
   0x0000000000400f90 <+123>:	jmp    0x400f97 <phase_3+130>
   0x0000000000400f92 <+125>:	mov    $0x0,%eax
   0x0000000000400f97 <+130>:	add    $0x68,%eax
   0x0000000000400f9a <+133>:	jmp    0x400fa1 <phase_3+140>
   0x0000000000400f9c <+135>:	mov    $0x0,%eax
---Type <return> to continue, or q <return> to quit---
   0x0000000000400fa1 <+140>:	sub    $0x68,%eax
   0x0000000000400fa4 <+143>:	jmp    0x400fb0 <phase_3+155>
   0x0000000000400fa6 <+145>:	callq  0x40143d <explode_bomb>
   0x0000000000400fab <+150>:	mov    $0x0,%eax
   0x0000000000400fb0 <+155>:	cmpl   $0x5,(%rsp)
   0x0000000000400fb4 <+159>:	jg     0x400fbc <phase_3+167>
   0x0000000000400fb6 <+161>:	cmp    0x4(%rsp),%eax
   0x0000000000400fba <+165>:	je     0x400fc1 <phase_3+172>
   0x0000000000400fbc <+167>:	callq  0x40143d <explode_bomb>
   0x0000000000400fc1 <+172>:	mov    0x8(%rsp),%rax
   0x0000000000400fc6 <+177>:	xor    %fs:0x28,%rax
   0x0000000000400fcf <+186>:	je     0x400fd6 <phase_3+193>
   0x0000000000400fd1 <+188>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400fd6 <+193>:	add    $0x18,%rsp
   0x0000000000400fda <+197>:	retq   
End of assembler dump.
(gdb) i r
rax            0x2	2
rbx            0x7fffffffde68	140737488346728
rcx            0x0	0
rdx            0x7fffffffdd64	140737488346468
rsi            0x0	0
rdi            0x7fffffffd6f0	140737488344816
rbp            0x4021f0	0x4021f0 <__libc_csu_init>
rsp            0x7fffffffdd60	0x7fffffffdd60

So now when I took first value as 2, the bomb isn't called so 2 is the right digit. we can jump on to next instruction.
=> 0x0000000000400f3e <+41>:	jg     0x400f45 <phase_3+48>
=> 0x0000000000400f45 <+48>:	cmpl   $0x7,(%rsp)

Lets check what %rsp holds
(gdb) i r
rax            0x2	2
rbx            0x7fffffffde68	140737488346728
rcx            0x0	0
rdx            0x7fffffffdd64	140737488346468
rsi            0x0	0
rdi            0x7fffffffd6f0	140737488344816
rbp            0x4021f0	0x4021f0 <__libc_csu_init>
rsp            0x7fffffffdd60	0x7fffffffdd60

(gdb) x /d0x7fffffffdd60
0x7fffffffdd60:	2

So the value of %rsp is less than 7 so the bomb is not called. We can jump the bomb and execute next instruction.

Moving on to next compare statement, we see that %eax is being compared to 0x4(%rsp), check what is 0x4(%rsp) and %eax
  0x0000000000400fa4 <+143>:	jmp    0x400fb0 <phase_3+155>
   0x0000000000400fa6 <+145>:	callq  0x40143d <explode_bomb>
   0x0000000000400fab <+150>:	mov    $0x0,%eax
   0x0000000000400fb0 <+155>:	cmpl   $0x5,(%rsp)
   0x0000000000400fb4 <+159>:	jg     0x400fbc <phase_3+167>
=> 0x0000000000400fb6 <+161>:	cmp    0x4(%rsp),%eax
   0x0000000000400fba <+165>:	je     0x400fc1 <phase_3+172>
   0x0000000000400fbc <+167>:	callq  0x40143d <explode_bomb>
   0x0000000000400fc1 <+172>:	mov    0x8(%rsp),%rax
   0x0000000000400fc6 <+177>:	xor    %fs:0x28,%rax

(gdb) i r
rax            0x199	409                       //%eax=409
rbx            0x7fffffffde68	140737488346728
rcx            0x0	0
rdx            0x7fffffffdd64	140737488346468
rsi            0x0	0
rdi            0x7fffffffd6f0	140737488344816
rbp            0x4021f0	0x4021f0 <__libc_csu_init>
rsp            0x7fffffffdd60	0x7fffffffdd60

(gdb) x /d$rsp+0x4
0x7fffffffdd64:	34

So it seems after the jump over the first bomb, we are comparing our second digit in the stack to a value our 
switch table jumps to. Since we want our second digit to be 409. lets try with input 409.

That's number 2.  Keep going!
2 409                           //It works
Halfway there!

***Conclusion: We can get different possible answers depending on what we put as our first digit (between 1-7). Depending on the first digit,
the jump table will indirectly jump to the correct second digit.















